#!/usr/bin/env python3
from http.server import BaseHTTPRequestHandler
from socketserver import TCPServer
from urllib.parse import unquote
import argparse
import json
import re
import shlex
import signal
import subprocess
import tempfile
import webbrowser

parser = argparse.ArgumentParser(
    usage="usage: avpnc [options...] profile.ovpn [openvpn options...]"
)
parser.add_argument(
    "-d",
    "--dump",
    action="store_true",
    help="Only dump credentials, don't start openvpn",
)
parser.add_argument("profile", type=argparse.FileType("r"), metavar="profile.ovpn")
parser.add_argument(
    "ovpnargs", metavar="[extra openvpn arguments...]", nargs=argparse.REMAINDER
)
args = parser.parse_args()


def X_is_running():
    from subprocess import Popen, PIPE

    p = Popen(["xset", "-q"], stdout=PIPE, stderr=PIPE)
    p.communicate()
    return p.returncode == 0


def get_url():
    regex = re.compile("^#AviatrixController (.*)$")
    for line in args.profile.readlines():
        match = regex.match(line)
        if match:
            return match.group(1)
    raise RuntimeError("Controller URL not found in profile")


def openvpn(username, password):
    with tempfile.NamedTemporaryFile(mode="w+", buffering=1) as passfile:
        passfile.write(f"{username}\n")
        passfile.write(f"{password}\n")
        cmd = f"sudo openvpn --config {args.profile.name} --auth-user-pass {passfile.name}"
        argv = shlex.split(cmd)
        argv.extend(args.ovpnargs)
        proc = subprocess.Popen(argv)
        for signum in [signal.SIGINT, signal.SIGTERM]:
            signal.signal(signum, lambda: proc.send_signal(signum))
        proc.communicate()


credentials = {}


class Handler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        return

    def do_POST(self):
        self.send_response(200)
        self.send_header("Access-Control-Allow-Origin", "*")
        self.end_headers()
        self.wfile.write(b"SuccessAviatrix")
        global credentials
        credentials = json.loads(unquote(self.path[1:]))


if X_is_running():
    TCPServer.allow_reuse_address = True
    with TCPServer(("localhost", 15395), Handler) as httpd:
        print("opening browser")
        webbrowser.open(get_url())
        httpd.handle_request()
else:
    print("X is not running")
    print("open below url in browser and copy Email and Token")
    print(get_url())
    credentials["Email"] = input("Enter Email: ")
    credentials["Token"] = input("Enter Token: ")

if args.dump:
    print(json.dumps(credentials))
else:
    openvpn(credentials["Email"], credentials["Token"])
